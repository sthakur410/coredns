// Objective-C API for talking to github.com/coredns/coredns/core/dnsserver Go package.
//   gobind -lang=objc github.com/coredns/coredns/core/dnsserver
//
// File is generated by gobind. Do not edit.

#ifndef __Dnsserver_H__
#define __Dnsserver_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class DnsserverConfig;
@class DnsserverDoHWriter;
@class DnsserverKey;
@class DnsserverServer;
@class DnsserverServerHTTPS;
@class DnsserverServerTLS;
@class DnsserverServergRPC;

/**
 * Config configuration for a single server.
 */
@interface DnsserverConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * The zone of the site.
 */
@property (nonatomic) NSString* _Nonnull zone;
// skipped field Config.ListenHosts with unsupported type: []string

/**
 * The port to listen on.
 */
@property (nonatomic) NSString* _Nonnull port;
/**
 * Root points to a base directory we find user defined "things".
First consumer is the file plugin to looks for zone files in this place.
 */
@property (nonatomic) NSString* _Nonnull root;
/**
 * Debug controls the panic/recover mechanism that is enabled by default.
 */
@property (nonatomic) BOOL debug;
/**
 * The transport we implement, normally just "dns" over TCP/UDP, but could be
DNS-over-TLS or DNS-over-gRPC.
 */
@property (nonatomic) NSString* _Nonnull transport;
// skipped field Config.FilterFunc with unsupported type: func(string) bool

// skipped field Config.TLSConfig with unsupported type: *crypto/tls.Config

// skipped field Config.Plugin with unsupported type: []github.com/coredns/coredns/plugin.Plugin

// skipped method Config.AddPlugin with unsupported parameter or return types

// skipped method Config.Handler with unsupported parameter or return types

// skipped method Config.Handlers with unsupported parameter or return types

@end

/**
 * DoHWriter is a nonwriter.Writer that adds more specific LocalAddr and RemoteAddr methods.
 */
@interface DnsserverDoHWriter : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field DoHWriter.Writer with unsupported type: github.com/coredns/coredns/plugin/pkg/nonwriter.Writer

- (BOOL)close:(NSError* _Nullable* _Nullable)error;
- (void)hijack;
// skipped method DoHWriter.LocalAddr with unsupported parameter or return types

// skipped method DoHWriter.RemoteAddr with unsupported parameter or return types

- (BOOL)tsigStatus:(NSError* _Nullable* _Nullable)error;
- (void)tsigTimersOnly:(BOOL)p0;
- (BOOL)write:(NSData* _Nullable)p0 ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
// skipped method DoHWriter.WriteMsg with unsupported parameter or return types

@end

/**
 * Key is the context key for the current server added to the context.
 */
@interface DnsserverKey : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

/**
 * Server represents an instance of a server, which serves
DNS requests at a particular address (host and port). A
server is capable of serving numerous zones on
the same address and the listener may be stopped for
graceful termination (POSIX only).
 */
@interface DnsserverServer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor Server.NewServer with unsupported parameter or return types

@property (nonatomic) NSString* _Nonnull addr;
/**
 * Address together with Stop() implement caddy.GracefulServer.
 */
- (NSString* _Nonnull)address;
// skipped method Server.Listen with unsupported parameter or return types

// skipped method Server.ListenPacket with unsupported parameter or return types

/**
 * OnStartupComplete lists the sites served by this server
and any relevant information, assuming Quiet is false.
 */
- (void)onStartupComplete;
// skipped method Server.Serve with unsupported parameter or return types

// skipped method Server.ServeDNS with unsupported parameter or return types

// skipped method Server.ServePacket with unsupported parameter or return types

/**
 * Stop stops the server. It blocks until the server is
totally stopped. On POSIX systems, it will wait for
connections to close (up to a max timeout of a few
seconds); on Windows it will close the listener
immediately.
This implements Caddy.Stopper interface.
 */
- (BOOL)stop:(NSError* _Nullable* _Nullable)error;
// skipped method Server.Tracer with unsupported parameter or return types

// skipped method Server.WrapListener with unsupported parameter or return types

@end

/**
 * ServerHTTPS represents an instance of a DNS-over-HTTPS server.
 */
@interface DnsserverServerHTTPS : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor ServerHTTPS.NewServerHTTPS with unsupported parameter or return types

@property (nonatomic) DnsserverServer* _Nullable server;
- (NSString* _Nonnull)address;
// skipped method ServerHTTPS.Listen with unsupported parameter or return types

// skipped method ServerHTTPS.ListenPacket with unsupported parameter or return types

/**
 * OnStartupComplete lists the sites served by this server
and any relevant information, assuming Quiet is false.
 */
- (void)onStartupComplete;
// skipped method ServerHTTPS.Serve with unsupported parameter or return types

// skipped method ServerHTTPS.ServeDNS with unsupported parameter or return types

// skipped method ServerHTTPS.ServeHTTP with unsupported parameter or return types

// skipped method ServerHTTPS.ServePacket with unsupported parameter or return types

/**
 * Shutdown stops the server (non gracefully).
 */
- (BOOL)shutdown:(NSError* _Nullable* _Nullable)error;
/**
 * Stop stops the server. It blocks until the server is totally stopped.
 */
- (BOOL)stop:(NSError* _Nullable* _Nullable)error;
// skipped method ServerHTTPS.Tracer with unsupported parameter or return types

// skipped method ServerHTTPS.WrapListener with unsupported parameter or return types

@end

/**
 * ServerTLS represents an instance of a TLS-over-DNS-server.
 */
@interface DnsserverServerTLS : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor ServerTLS.NewServerTLS with unsupported parameter or return types

@property (nonatomic) DnsserverServer* _Nullable server;
- (NSString* _Nonnull)address;
// skipped method ServerTLS.Listen with unsupported parameter or return types

// skipped method ServerTLS.ListenPacket with unsupported parameter or return types

/**
 * OnStartupComplete lists the sites served by this server
and any relevant information, assuming Quiet is false.
 */
- (void)onStartupComplete;
// skipped method ServerTLS.Serve with unsupported parameter or return types

// skipped method ServerTLS.ServeDNS with unsupported parameter or return types

// skipped method ServerTLS.ServePacket with unsupported parameter or return types

- (BOOL)stop:(NSError* _Nullable* _Nullable)error;
// skipped method ServerTLS.Tracer with unsupported parameter or return types

// skipped method ServerTLS.WrapListener with unsupported parameter or return types

@end

/**
 * ServergRPC represents an instance of a DNS-over-gRPC server.
 */
@interface DnsserverServergRPC : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
// skipped constructor ServergRPC.NewServergRPC with unsupported parameter or return types

@property (nonatomic) DnsserverServer* _Nullable server;
- (NSString* _Nonnull)address;
// skipped method ServergRPC.Listen with unsupported parameter or return types

// skipped method ServergRPC.ListenPacket with unsupported parameter or return types

/**
 * OnStartupComplete lists the sites served by this server
and any relevant information, assuming Quiet is false.
 */
- (void)onStartupComplete;
// skipped method ServergRPC.Query with unsupported parameter or return types

// skipped method ServergRPC.Serve with unsupported parameter or return types

// skipped method ServergRPC.ServeDNS with unsupported parameter or return types

// skipped method ServergRPC.ServePacket with unsupported parameter or return types

/**
 * Shutdown stops the server (non gracefully).
 */
- (BOOL)shutdown:(NSError* _Nullable* _Nullable)error;
/**
 * Stop stops the server. It blocks until the server is
totally stopped.
 */
- (BOOL)stop:(NSError* _Nullable* _Nullable)error;
// skipped method ServergRPC.Tracer with unsupported parameter or return types

// skipped method ServergRPC.WrapListener with unsupported parameter or return types

@end

/**
 * DefaultPort is the default port.
 */
FOUNDATION_EXPORT NSString* _Nonnull const DnsserverDefaultPort;

@interface Dnsserver : NSObject
// skipped variable Directives with unsupported type: []string

// skipped variable EnableChaos with unsupported type: map[string]struct{}

// skipped variable GracefulTimeout with unsupported type: time.Duration

/**
 * Port is the port we listen on by default.
 */
+ (NSString* _Nonnull) port;
+ (void) setPort:(NSString* _Nonnull)v;

/**
 * Quiet mode will not show any informative output on initialization.
 */
+ (BOOL) quiet;
+ (void) setQuiet:(BOOL)v;

@end

// skipped function GetConfig with unsupported parameter or return types


// skipped function NewServer with unsupported parameter or return types


// skipped function NewServerHTTPS with unsupported parameter or return types


// skipped function NewServerTLS with unsupported parameter or return types


// skipped function NewServergRPC with unsupported parameter or return types


#endif
